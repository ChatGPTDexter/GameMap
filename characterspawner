using System.Collections.Generic;
using System.Globalization; // To handle number formats
using System.IO;
using UnityEngine;
using System.Linq;

public class CharacterSpawner : MonoBehaviour
{
    [SerializeField] private GameObject characterPrefab; // Assign your character prefab here
    [SerializeField] private string csvFileName = "coordinates.csv"; // Name of the CSV file in the Assets folder

    void Start()
    {
        string filePath = Path.Combine(Application.dataPath, csvFileName);
        List<Vector3> coordinates = ReadCoordinatesFromCSV(filePath);
        SpawnCharacters(coordinates);
    }

    private List<Vector3> ReadCoordinatesFromCSV(string filePath)
    {
        List<Vector3> coordinates = new List<Vector3>();

        try
        {
            // Read all lines from the CSV file
            var lines = File.ReadAllLines(filePath);

            // Skip the header line and parse the rest
            foreach (var line in lines.Skip(1))
            {
                // Split the line by commas, but taking care of quoted strings
                var values = SplitCsvLine(line);

                if (values.Length >= 4)
                {
                    // Try to parse the x, y, z coordinates
                    if (float.TryParse(values[1], NumberStyles.Float, CultureInfo.InvariantCulture, out float x) &&
                        float.TryParse(values[2], NumberStyles.Float, CultureInfo.InvariantCulture, out float y) &&
                        float.TryParse(values[3], NumberStyles.Float, CultureInfo.InvariantCulture, out float z))
                    {
                        // Create a new Vector3 and add to the list
                        coordinates.Add(new Vector3(x, y, z));
                    }
                    else
                    {
                        Debug.LogWarning($"Failed to parse coordinates for line: {line}");
                    }
                }
            }
        }
        catch (System.Exception ex)
        {
            Debug.LogError("Error reading CSV file: " + ex.Message);
        }

        return coordinates;
    }

    private void SpawnCharacters(List<Vector3> coordinates)
    {
        foreach (var coordinate in coordinates)
        {
            Instantiate(characterPrefab, coordinate, Quaternion.identity);
        }
    }

    // Utility method to correctly split a CSV line taking care of quoted strings
    private string[] SplitCsvLine(string line)
    {
        List<string> values = new List<string>();
        bool inQuotes = false;
        string value = "";

        for (int i = 0; i < line.Length; i++)
        {
            char c = line[i];

            if (c == '"' && (i == 0 || line[i - 1] != '\\'))
            {
                inQuotes = !inQuotes; // Toggle state
            }
            else if (c == ',' && !inQuotes)
            {
                values.Add(value);
                value = "";
            }
            else
            {
                value += c;
            }
        }
        values.Add(value);

        return values.ToArray();
    }
}
